#lang shplait

type Value
| intV(n :: Int)
| closV(param::Symbol, body::Exp, env::Env)

def mt_env = []
def extend_env = cons
type Binding
| bind(name:: Symbol, val :: Value)
type Env = Listof(Binding)

type Exp
| intE(n :: Int)
| plusE(l:: Exp, r:: Exp)
| multE(l:: Exp, r:: Exp)
| appE(f:: Exp, arg::Exp)
| funE(param::Symbol, body::Exp)
| idE(s::Symbol)
| letE(n::Symbol, rhs::Exp, body::Exp)
| sequenceE(e:: Exp, rst:: Listof(Exp))

module test:
  check:  parse('2')
          ~is intE(2)
  check:  parse('2 + 3')
          ~is plusE(intE(2), intE(3))
  check:  parse('2 * 3')
          ~is multE(intE(2), intE(3))
  check:  parse('(1 + 2) * 4')
          ~is multE(plusE(intE(1), intE(2)), intE(4))
  check:  parse('2 2')
          ~raises "invalid input"
  check:  parse('x')
          ~is idE(#'x)
  check:  parse('f(2)')
          ~is appE(idE(#'f), intE(2))
  check:  parse('let x = 1 + 2: x')
          ~is letE(#'x, plusE(intE(1), intE(2)), idE(#'x))
  check:  parse('fun(x): x')
          ~is funE(#'x, idE(#'x))

fun parse(s :: Syntax) :: Exp:
  cond
  | syntax_is_integer(s):
      intE(syntax_to_integer(s))
  | syntax_is_symbol(s):
      idE(syntax_to_symbol(s))
  | ~else:
      match s
      | 'let $n = $e1: $e2': letE(syntax_to_symbol(n), parse(e1), parse(e2))
      | '$e1 + $e2':
          plusE(parse(e1), parse(e2))
      | '$e1 * $e2':
          multE(parse(e1), parse(e2))
      | '$e1($e2)': appE(parse(e1), parse(e2))
      | 'fun($arg): $body': funE(syntax_to_symbol(arg), parse(body))
      | 'sequence $value:
           $exp
           ...
        ' : sequenceE(parse(value), map(parse, syntax_to_list('[$exp, ...]')))
      // For the homework you can use the following pattern
      // | 'let*: 
      //      $id = $exp
      //      ...
      //    $body
      //   ' : .... syntax_to_list('[$id, ...]') .... syntax_to_list('[$exp, ...]') ....
      | '($e)': parse(e)
      | ~else: error(#'parse, "invalid input " +& s)

module test:
  check:  lookup(#'x, [])
          ~raises "free variable"
  check:  lookup(#'x, [bind(#'x, intV(3))])
          ~is intV(3)
  check:  lookup(#'x, [bind(#'y, intV(3)), bind(#'x, intV(4))])
          ~is intV(4)

fun lookup(s :: Symbol, env :: Listof(Binding)):: Value:
  match env
  | []: error(#'lookup, "free variable " +& s)
  | cons(b, rst):
      cond
      | bind.name(b) == s: bind.val(b)
      | ~else: lookup(s, rst)

module test:
  check:  interp(intE(3), []) // 3
          ~is intV(3)
  check:  interp(plusE(intE(1), intE(3)), []) // 1 + 3
          ~is intV(4)
  check:  interp(multE(intE(2), intE(4)), []) // 2 * 4
          ~is intV(8)
  check:  interp(plusE(intE(1), multE(intE(2), intE(4))), []) // 1 + 2 * 4
          ~is intV(9)
  check:  interp(idE(#'id), [])
          ~raises "free variable"
  check:  interp(parse('let double = (fun (x): x + x) : double(8)'), [])
          ~is intV(16)
  check:  interp(parse('let double = (fun (x): x + x) : let quadruple = (fun (x): double(x) + double(x)) : quadruple(2)'), [])
          ~is intV(8)
  check:  interp(parse('fun (x): x + y'), [])
          ~is closV(#'x, plusE(idE(#'x), idE(#'y)), [])
  check:  interp(parse('(fun (x): fun(y): x + y)(1)'), [])
          ~is closV(#'y, plusE(idE(#'x), idE(#'y)), extend_env(bind(#'x, intV(1)), []))
  check:  interp(parse('2(2)'), [])
          ~raises "not a function"
  check:  interp(parse('1 + (fun (x): x)'), [])
          ~raises "not a number"
  check:  interp(parse('let add1 = (fun (x): x + 1):
                          sequence 1:
                            add1
                            fun (y): y * 3
                            fun (z): z * z
                        '), [])
          ~is intV(36)

fun num_op(v1::Value, v2::Value, op::(Int, Int) -> Int):: Value:
  cond
  | v1 is_a intV && v2 is_a intV:
      intV(op(intV.n(v1), intV.n(v2)))
  | ~else: error(#'num_op, "not a number")

fun interp(a :: Exp, env::Env) :: Value:
  match a
  | intE(n): intV(n)
  | idE(s): lookup(s, env)
  | plusE(l, r): num_op(interp(l, env), interp(r, env), fun(l, r): l + r)
  | multE(l, r): num_op(interp(l, env), interp(r, env), fun(l, r): l * r)
  | appE(f, arg):
      match interp(f, env)
      | closV(param, body, c_env):
          interp(body, extend_env(bind(param, interp(arg, env)), c_env))
      | ~else: error(#'interp, "not a function")
  | letE(n, rhs, body): 
      interp(body, extend_env(bind(n, interp(rhs, env)), env))
  | funE(param, body): closV(param, body, env)
  | sequenceE(e, rst): 
      def val = interp(e, env)
      foldl(fun(nextFn, acc): 
              match interp(nextFn, env)
              | intV(n):
                  error(#'interp, "Can't interpret integer")
              | closV(arg, body, cenv):
                  interp(body, extend_env(bind(arg, acc), cenv))
            ,val
            ,rst)