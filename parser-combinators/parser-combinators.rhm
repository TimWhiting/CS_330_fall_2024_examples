#lang shplait 
~untyped

// parser type

// Takes in a list of characters, a success continuation (result, chars, cont), and failure continuation
type Parser(?a, ?b) = (Listof(Char), (?a, Listof(Char), (() -> ?b)) -> ?b, (() -> ?b)) -> ?b

fun string_to_list(s :: String) :: Listof(Char):
  if string_length(s) == 0
  | []
  | cons(string_get(s, 0), string_to_list(substring(s, 1, string_length(s))))

fun list_to_string(cs :: Listof(Char)) :: String:
  foldl(fun(c, s): s +& c, "", cs)

// parse driver function
fun parse(p :: Parser(?a,?a), s::String) :: ?a:
  p(string_to_list(s),
    fun(x, cs, fk):
       if is_empty(cs) | x | fk(),
    fun(): error(#'parse, "couldn't parse"))

// delay
macro 'delayp $p':
  'fun(cs, sk, fk): $p(cs,sk,fk)'

// unit

fun unitp(x):
  fun(cs, sk, fk):
    sk(x, cs, fk)

check: parse(unitp(42), "")
       ~is 42

// fail

def failp = fun(cs, sk, fk): fk()

check: parse(failp, "")
       ~raises "couldn't parse"

// bind1

fun bind1(f:: ?a₀ -> Parser(?c, ?b), p₀::Parser(?a₀, ?b)) :: Parser(?c, ?b):
  fun(cs, sk, fk):
    p₀(cs,
       fun(x₀, cs, fk):
          f(x₀)(cs, sk, fk),
       fk)

check: parse(bind1(fun(x): unitp(x + 1), unitp(42)), "")
       ~is 43


macro 
| 'do: 
     return $m1 ...':
     'unitp($m1 ...)'
| 'do: 
    $m1': '$m1'
| 'do:
    $x <- return $m1
    $m2
    ...':
    'bind1((fun($x): 
             do:
               $m2 
               ...)
           ,unitp($m1))'
| 'do:
    $x <- $m1
    $m2
    ...':
    'bind1((fun($x): 
             do:
               $m2 
               ...), $m1)'
| 'do: 
    return $m1 ...
    $m2
    ...':
    'do:
      unitp($m1 ...)
      $m2
      ...'
| 'do: 
    $m1
    $m2
    ...':
    'bind1((fun(_): 
             do:
              $m2
              ...), $m1)'

fun bind2(f:: (?a₀, ?a₁) -> Parser(?c, ?b), p₀::Parser(?a₀, ?b), p₁::Parser(?a₁, ?b)) :: Parser(?c, ?b):
  bind1(fun(x₀): bind1(fun(x₁): f(x₀, x₁), p₁), p₀)

fun bind3(f:: (?a₀, ?a₁, ?a₂) -> Parser(?c, ?b), p₀::Parser(?a₀, ?b), p₁::Parser(?a₁, ?b), p₂::Parser(?a₂, ?b)) :: Parser(?c, ?b):
  bind2(fun(x₀, x₁): bind1(fun(x₂): f(x₀, x₁, x₂), p₂), p₀, p₁)

fun bind4(f:: (?a₀, ?a₁, ?a₂, ?a₃) -> Parser(?c, ?b), p₀::Parser(?a₀, ?b), p₁::Parser(?a₁, ?b), p₂::Parser(?a₂, ?b), p₃::Parser(?a₃, ?b)) :: Parser(?c, ?b):
  bind3(fun(x₀, x₁, x₂): bind1(fun(x₃): f(x₀, x₁, x₂, x₃), p₃), p₀, p₁, p₂)

// fmap

fun fmap1(f:: ?a₀ -> ?c, p₀::Parser(?a₀, ?b)) :: Parser(?c, ?b):
  bind1(fun(x): unitp(f(x)), p₀)

fun fmap2(f:: (?a₀, ?a₁) -> ?c, p₀::Parser(?a₀, ?b), p₁::Parser(?a₁, ?b)) :: Parser(?c, ?b):
  bind2(fun(x₀, x₁): unitp(f(x₀, x₁)), p₀, p₁)

fun fmap3(f:: (?a₀, ?a₁, ?a₂) -> ?c, p₀::Parser(?a₀, ?b), p₁::Parser(?a₁, ?b), p₂::Parser(?a₂, ?b)) :: Parser(?c, ?b):
  bind3(fun(x₀, x₁, x₂): unitp(f(x₀, x₁, x₂)), p₀, p₁, p₂)

fun fmap4(f:: (?a₀, ?a₁, ?a₂, ?a₃) -> ?c, p₀::Parser(?a₀, ?b), p₁::Parser(?a₁, ?b), p₂::Parser(?a₂, ?b), p₃::Parser(?a₃, ?b)) :: Parser(?c, ?b):
  bind4(fun(x₀, x₁, x₂, x₃): unitp(f(x₀, x₁, x₂, x₃)), p₀, p₁, p₂, p₃)

// alternation

fun altp(ps :: Listof(Parser(?a, ?b))) :: Parser(?a, ?b):
  fun(cs, sk, fk):
    foldr(fun(p, fk): fun(): p(cs, sk, fk), fk, ps)()

check: parse(altp([failp, failp, unitp(10)]), "")
       ~is 10

def charp:
  fun(cs, sk, fk):
    match cs
    | []: fk()
    | cons(c,cs): sk(c, cs, fk)

check: parse(charp, "a")
       ~is #{#\a}

fun star_p(p :: Parser(?a, ?b)) :: Parser(Listof(?a), ?b):
  altp([bind1(fun(x): bind1(fun(xs): unitp(cons(x,xs)), star_p(p)), p), unitp([])])

check: parse(star_p(charp), "abc")
       ~is [#{#\a}, #{#\b}, #{#\c}]

check: parse(bind1(fun(cs): unitp(list_to_string(cs)), star_p(charp)), "abc")
       ~is "abc"

fun maybe_p(p :: Parser(?a, ?b)) :: Parser(Optionof(?a), ?b):
  altp([fmap1(some, p), unitp(none())])

check: parse(maybe_p(charp), "a")
       ~is some(#{#\a})

check: parse(maybe_p(charp), "")
       ~is none()

fun seqp(p₀ :: Parser(?a, ?b), p₁ :: Parser(?b, ?b)) :: Parser(?b, ?b):
  bind1(fun(_): p₁, p₀)

fun seqp_first(p₀ :: Parser(?a, ?b), p₁ :: Parser(?b, ?b)) :: Parser(?b, ?b):
  bind1(fun(x): bind1(fun(_): unitp(x), p₁), p₀)

check: parse(seqp(charp, charp), "ab")
       ~is #{#\b}

fun plus_p(p :: Parser(?a, ?b)) :: Parser(Listof(?a), ?b):
  bind1(fun(r): bind1(fun(rs): unitp(cons(r,rs)), star_p(p)), p)

check: parse(plus_p(charp), "abc")
       ~is [#{#\a}, #{#\b}, #{#\c}]

fun char_predicate(p:: Char -> Boolean) :: Parser(Char, ?b):
  bind1(fun(c): if p(c) | unitp(c) | failp, charp)

fun char_eq(c:: Char):: Parser(Char, ?b):
  char_predicate(fun(x): x == c)

fun literalp(s:: String):: Parser(String, ?b):
  foldr(fun(c, p): seqp(char_eq(c), p), unitp(s), string_to_list(s))

check: parse(literalp("hello"), "hello")
       ~is "hello"

fun is_whitespace(c::Char)::Boolean:
  cond
  | c == #{#\space}: #true
  | c == #{#\tab}: #true
  | c == #{#\return}: #true
  | c == #{#\newline}: #true
  | ~else: #false

def digit_p:
  char_predicate(fun(c):
                    cond
                    | c == #{#\0}: #true
                    | c == #{#\1}: #true
                    | c == #{#\2}: #true
                    | c == #{#\3}: #true
                    | c == #{#\4}: #true
                    | c == #{#\5}: #true
                    | c == #{#\6}: #true
                    | c == #{#\7}: #true
                    | c == #{#\8}: #true
                    | c == #{#\9}: #true
                    | ~else: #false)

fun char_to_integer(c :: Char) :: Int:
  cond
  | c == #{#\0}: 0
  | c == #{#\1}: 1
  | c == #{#\2}: 2
  | c == #{#\3}: 3
  | c == #{#\4}: 4
  | c == #{#\5}: 5
  | c == #{#\6}: 6
  | c == #{#\7}: 7
  | c == #{#\8}: 8
  | c == #{#\9}: 9
  | ~else: error(#'char_to_integer, "not a digit")

fun str_to_number(s :: String) :: Int:
  foldl(fun(c, n): n * 10 + char_to_integer(c), 0, string_to_list(s))

def number_p = bind1(fun(d): 
                        unitp(str_to_number(list_to_string(d))), plus_p(digit_p))

check:  parse(number_p, "123")
        ~is 123

def string_charp:
  fun(cs, sk, fk):
    match cs
    | []: fk()
    | cons(c,cs):
        if c == #{#\\}: // Escape sequence
        | match cs
          | []: fk()
          | cons(n, css):
              cond
              | n == #{#\\}: sk(#{#\\}, css, fk)
              | n == #{#\"}: sk(#{#\"}, css, fk)
              | n == #{#\n}: sk(#{#\newline}, css, fk)
              | n == #{#\r}: sk(#{#\return}, css, fk)
              | ~else: fk()
        | if c == #{#\"} 
          | fk()
          | sk(c, cs, fk)
        

def string_p:
  bind1(fun(d): unitp(list_to_string(d)), seqp(char_eq(#{#\"}), seqp_first(star_p(string_charp), char_eq(#{#\"}))))

check:  parse(string_p, "\"123\"")
        ~is "123"

check:  parse(string_p, "\"\\\\123\"")
        ~is "\\123"
check:  parse(string_p, "\"\\n123\"")
        ~is "\n123"
check:  parse(string_p, "\"\\r123\"")
        ~is "\r123"

fun token_parser(p::Parser(?a, ?b))::Parser(?a, ?b):
  seqp(star_p(char_predicate(is_whitespace)), p)

check: parse(token_parser(charp), "  c")
       ~is #{#\c}

fun delimitedp(leftp, rightp, commap, p):
  seqp(leftp, altp([seqp(token_parser(rightp), unitp([])), 
                    bind1(
                      fun(x): 
                        bind1(
                          fun(xs): 
                              unitp(cons(x,xs)),
                          block:
                              def loop = fun():
                                          altp([seqp(token_parser(rightp), unitp([])),
                                                bind1(
                                                      fun(x): 
                                                        bind1(
                                                            fun(xs): 
                                                                unitp(cons(x,xs)),
                                                            loop()), 
                                                      seqp(token_parser(commap), token_parser(p)))])
                              loop()
                      ),
                      token_parser(p))]))

fun listp(p):
  delimitedp(literalp("("), literalp(")"), literalp(","), p)

check: parse(listp(charp), "(a,b,c)")
       ~is [#{#\a}, #{#\b}, #{#\c}]
check: parse(listp(charp), "( a , b , c )")
       ~is [#{#\a}, #{#\b}, #{#\c}]

type JSON
| JSNull()
| JSBool(b :: Boolean)
| JSNum(n :: Int)
| JSString(s :: String)
| JSArray(arr :: Listof(JSON))
| JSObject(entries :: Listof(String * JSON))

def jsonp:
  altp([
    .... // TODO: Fill in the alternatives for json grammar (Hint: use bind1 / fmap1 functions to transform the result of a parser)
  ])

check: parse(jsonp, "null")
       ~is JSNull()
check: parse(jsonp, "[]")
       ~is JSArray([])
check: parse(jsonp, "[ 1 , 2 , 3 ]")
       ~is JSArray([JSNum(1), JSNum(2), JSNum(3)])
check: parse(jsonp, "{\"a\":1,\"b\":2}")
       ~is JSObject([values("a", JSNum(1)), values("b", JSNum(2))])
  