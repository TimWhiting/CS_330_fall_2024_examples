#lang shplait
import:
  open: "state_monad.rhm"

type Value
| intV(n :: Int)
| closV(param::Symbol, body::Exp, env::Env)
| boxV(l :: Location)

def mt_env = []
def extend_env = cons
type Binding
| binding(name:: Symbol, val :: Value)
type Env = Listof(Binding)

def mt_store = []
def extend_store = cons
type Location = Int
type StoreValue
| SV(location :: Location, val :: Value)
type Store = Listof(StoreValue)

fun lookup(s :: Symbol, env :: Listof(Binding)):: Value:
  match env
  | []: error(#'lookup, "free variable " +& s)
  | cons(b, rst):
      cond
      | binding.name(b) == s: binding.val(b)
      | ~else: lookup(s, rst)

fun find(l:: Location, st ::Store):: Value:
  match st
  | []: error(#'find, "location not found")
  | cons(sv, rst):
      cond
      | SV.location(sv) == l: SV.val(sv)
      | ~else: find(l, rst)

type Exp
| intE(n :: Int)
| plusE(l:: Exp, r:: Exp)
| multE(l:: Exp, r:: Exp)
| appE(f:: Exp, arg::Exp)
| funE(param::Symbol, body::Exp)
| idE(s::Symbol)
| letE(n::Symbol, rhs::Exp, body::Exp)
| boxE(arg :: Exp)
| unboxE(arg :: Exp)
| setboxE(bx :: Exp, val :: Exp)
| beginE(l :: Exp, r :: Exp)

fun parse(s :: Syntax) :: Exp:
  cond
  | syntax_is_integer(s):
      intE(syntax_to_integer(s))
  | syntax_is_symbol(s):
      idE(syntax_to_symbol(s))
  | ~else:
      match s
      | 'let $n = $e1: $e2': letE(syntax_to_symbol(n), parse(e1), parse(e2))
      | 'begin: 
          $l
          $r': beginE(parse(l), parse(r)) // An extension could be to allow any number of expressions here
      | '$e1 + $e2':
          plusE(parse(e1), parse(e2))
      | '$e1 * $e2':
          multE(parse(e1), parse(e2))
      | 'box($e)': boxE(parse(e))
      | 'unbox($e)': unboxE(parse(e))
      | 'setbox($bx, $val)': setboxE(parse(bx), parse(val))
      | '$e1($e2)': appE(parse(e1), parse(e2))
      | 'fun($arg): $body': funE(syntax_to_symbol(arg), parse(body))
      | '($e)': parse(e)
      | ~else: error(#'parse, "invalid input " +& s)

fun max_location(st :: Store):: Location:
  match st
  | []: 0
  | cons(sv, rst):
      max(SV.location(sv), max_location(rst))

// The type of our interp (a state monad)
type result = Store -> StateValue(Value, Store)

// Some helper functions that make use of the state in the monad
fun find_store(l :: Location) :: result:
  fun(s::Store): SValue(find(l, s), s)

fun new_location() :: Store -> StateValue(Location, Store):
  fun(s::Store): SValue(max_location(s) + 1, s)

fun add_to_store(sv :: StoreValue) :: Store -> StateValue(Void, Store):
  fun(st :: Store): SValue(#void, extend_store(sv, st))

// The main interpreter
fun num_op(e1::Exp, e2::Exp, env::Env, op::(Int, Int) -> Int):: result:
  do:
    v_l <- interp(e1, env)
    v_r <- interp(e2, env)
    if v_l is_a intV && v_r is_a intV
    | return(intV(op(intV.n(v_l), intV.n(v_r))))
    | error(#'num_op, "not a number")

fun interp(a :: Exp, env::Env) :: result:
  match a
  | intE(n): return(intV(n))
  | idE(s): return(lookup(s, env))
  | plusE(l, r): num_op(l, r, env, fun(l, r): l + r)
  | multE(l, r): num_op(l, r, env, fun(l, r): l * r)
  | appE(f, arg):
      do: 
        v <- interp(f, env)
        match v
        | closV(param, body, c_env):
            do:
              argv <- interp(arg, env)
              interp(body, extend_env(binding(param, argv), c_env))
        | ~else: error(#'interp, "not a function")
  | letE(n, rhs, body): 
      do:
        v <- interp(rhs, env)
        interp(body, extend_env(binding(n, v), env))
  | funE(param, body): return(closV(param, body, env))
  | boxE(e): 
      do: 
        v <- interp(e, env)
        l <- new_location()
        add_to_store(SV(l, v))
        return(boxV(l))
  | setboxE(b, e): 
      do:
        v <- interp(b, env)
        match v
        | boxV(l):
            do:
              v_e <- interp(e, env)
              add_to_store(SV(l, v_e))
              return(v_e)
        | ~else:  error(#'interp, "not a box")
  | unboxE(e): 
      do:
        b <- interp(e, env)
        match b
        | boxV(l): find_store(l)
        | ~else: error(#'interp, "not a box")
  | beginE(l, r):
      do:
        v_l <- interp(l, env)
        interp(r, env)

fun run_interp(e :: Exp, env :: Env, st::Store) :: StateValue(Value, Store):
  run_state st:
    interp(e, env)


module test:
  check:  run_interp(intE(3), [], []) // 3
          ~is SValue(intV(3), [])
  check:  run_interp(plusE(intE(1), intE(3)), [], []) // 1 + 3
          ~is SValue(intV(4), [])
  check:  run_interp(multE(intE(2), intE(4)), [], []) // 2 * 4
          ~is SValue(intV(8), [])
  check:  run_interp(plusE(intE(1), multE(intE(2), intE(4))), [], []) // 1 + 2 * 4
          ~is SValue(intV(9), [])
  check:  run_interp(idE(#'id), [], [])
          ~raises "free variable"
  check:  run_interp(parse('let double = (fun (x): x + x) : double(8)'), [], [])
          ~is SValue(intV(16), [])
  check:  run_interp(parse('let double = (fun (x): x + x) : let quadruple = (fun (x): double(x) + double(x)) : quadruple(2)'), [], [])
          ~is SValue(intV(8), [])
  check:  run_interp(parse('fun (x): x + y'), [], [])
          ~is SValue(closV(#'x, plusE(idE(#'x), idE(#'y)), []), [])
  check:  run_interp(parse('(fun (x): fun(y): x + y)(1)'), [], [])
          ~is SValue(closV(#'y, plusE(idE(#'x), idE(#'y)), extend_env(binding(#'x, intV(1)), [])), [])
  check:  run_interp(parse('2(2)'), [], [])
          ~raises "not a function"
  check:  run_interp(parse('1 + (fun (x): x)'), [], [])
          ~raises "not a number"
  check:  run_interp(parse('box(0)'), [], [])
          ~is SValue(boxV(1), [SV(1, intV(0))])
  check:  run_interp(parse('unbox(box(0))'), [], [])
          ~is SValue(intV(0), [SV(1, intV(0))])
  check:  run_interp(parse('let x = box(0):
                              begin:
                                setbox(x, 1)
                                unbox(x)'), [], [])
          ~is SValue(intV(1), [SV(1, intV(1)), SV(1, intV(0))])
  check:  run_interp(parse('unbox(0)'), [], [])
          ~raises "not a box"
  check:  run_interp(parse('setbox(0, 1)'), [], [])
          ~raises "not a box"