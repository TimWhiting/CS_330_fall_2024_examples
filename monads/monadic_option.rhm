#lang shplait
import:
  open: "option_monad.rhm"

type Value
| intV(n :: Int)
| closV(param::Symbol, body::Exp, env::Env)

def mt_env = []
def extend_env = cons
type Binding
| binding(name:: Symbol, val :: Value)
type Env = Listof(Binding)

fun lookup(s :: Symbol, env :: Listof(Binding)):: Value:
  match env
  | []: error(#'lookup, "free variable " +& s)
  | cons(b, rst):
      cond
      | binding.name(b) == s: binding.val(b)
      | ~else: lookup(s, rst)

type Exp
| intE(n :: Int)
| plusE(l:: Exp, r:: Exp)
| multE(l:: Exp, r:: Exp)
| divE(l:: Exp, r:: Exp)
| appE(f:: Exp, arg::Exp)
| funE(param::Symbol, body::Exp)
| idE(s::Symbol)
| letE(n::Symbol, rhs::Exp, body::Exp)

fun parse(s :: Syntax) :: Exp:
  cond
  | syntax_is_integer(s):
      intE(syntax_to_integer(s))
  | syntax_is_symbol(s):
      idE(syntax_to_symbol(s))
  | ~else:
      match s
      | 'let $n = $e1: $e2': letE(syntax_to_symbol(n), parse(e1), parse(e2))
      | '$e1 + $e2':
          plusE(parse(e1), parse(e2))
      | '$e1 * $e2':
          multE(parse(e1), parse(e2))
      | '$e1 / $e2':
          multE(parse(e1), parse(e2))
      | '$e1($e2)': appE(parse(e1), parse(e2))
      | 'fun($arg): $body': funE(syntax_to_symbol(arg), parse(body))
      | '($e)': parse(e)
      | ~else: error(#'parse, "invalid input " +& s)

// The main interpreter
fun num_op(e1 :: Exp, e2 :: Exp, env :: Env, op :: (Int, Int) -> Int):: Optionof(Value):
  do:
    v_l <- interp(e1, env)
    v_r <- interp(e2, env)
    if v_l is_a intV && v_r is_a intV
    | return(intV(op(intV.n(v_l), intV.n(v_r))))
    | none()

fun interp(a :: Exp, env::Env) :: Optionof(Value):
  match a
  | intE(n): return(intV(n))
  | idE(s): return(lookup(s, env))
  | plusE(l, r): num_op(l, r, env, fun(l, r): l + r)
  | multE(l, r): num_op(l, r, env, fun(l, r): l * r)
  | divE(l, r):
      do:
        v_l <- interp(l, env)
        v_r <- interp(r, env)
        if v_l is_a intV && v_r is_a intV
        | if intV.n(v_r) == 0
          | none()
          | return(intV(intV.n(v_l) / intV.n(v_r)))
        | none()
  | appE(f, arg):
      do: 
        v <- interp(f, env)
        match v
        | closV(param, body, c_env):
            do:
              argv <- interp(arg, env)
              interp(body, extend_env(binding(param, argv), c_env))
        | ~else: error(#'interp, "not a function")
  | letE(n, rhs, body): 
      do:
        v <- interp(rhs, env)
        interp(body, extend_env(binding(n, v), env))
  | funE(param, body): return(closV(param, body, env))

module test:
  check:  interp(intE(3), []) // 3
          ~is some(intV(3))
  check:  interp(plusE(intE(1), intE(3)), []) // 1 + 3
          ~is some(intV(4))
  check:  interp(multE(intE(2), intE(4)), []) // 2 * 4
          ~is some(intV(8))
  check:  interp(plusE(intE(1), multE(intE(2), intE(4))), []) // 1 + 2 * 4
          ~is some(intV(9))
  check:  interp(divE(intE(1), intE(0)), []) // 1 + 2 * 4
          ~is none()
  check:  interp(idE(#'id), [])
          ~raises "free variable"
  check:  interp(parse('let double = (fun (x): x + x) : double(8)'), [])
          ~is some(intV(16))
  check:  interp(parse('let double = (fun (x): x + x) : let quadruple = (fun (x): double(x) + double(x)) : quadruple(2)'), [])
          ~is some(intV(8))
  check:  interp(parse('fun (x): x + y'), [])
          ~is some(closV(#'x, plusE(idE(#'x), idE(#'y)), []))
  check:  interp(parse('(fun (x): fun(y): x + y)(1)'), [])
          ~is some(closV(#'y, plusE(idE(#'x), idE(#'y)), extend_env(binding(#'x, intV(1)), [])))
  check:  interp(parse('2(2)'), [])
          ~raises "not a function"
  check:  interp(parse('1 + (fun (x): x)'), [])
          ~is none()