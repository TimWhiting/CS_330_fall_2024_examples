#lang shplait
type Tree
| Leaf(value :: Int)
| Node(left :: Tree, right :: Tree)

fun tree_sum(t :: Tree) :: Int:
  match t
  | Leaf(val): val
  | Node(left, right):
      tree_sum(left) + tree_sum(right)

check:  tree_sum(Leaf(1))
        ~is 1
check:  tree_sum(Node(Node(Leaf(1), Leaf(2)), Leaf(4)))
        ~is 7
check:  tree_sum(Node(Node(Leaf(1), Leaf(2)), Node(Leaf(4), Leaf(5))))
        ~is 12


// Optionof type example
fun safe_div(n :: Int, d :: Int) :: Optionof(Int):
  if d == 0
  | none()
  | some(n/d)

check: safe_div(1, 0)
       ~is none()

fun index_of(l :: Listof(Int), n :: Int) :: Optionof(Int) :
  index_of_acc(l, n, 0)

fun index_of_acc(l :: Listof(Int), n :: Int, index :: Int) :: Optionof(Int) :
  match l
  | [] :
      none()
  | cons(value, lst_rest):
      if n == value
      | some(index)
      | index_of_acc(lst_rest, n, index+1)


check: index_of([1, 2, 3], 2)
       ~is some(1)

check: index_of([1, 2, 3], 20)
       ~is none()