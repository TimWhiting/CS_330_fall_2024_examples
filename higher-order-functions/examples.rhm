#lang shplait

// Find the index of the first element satisfying the predicate `p`, or none if not found
fun find_pred(l :: Listof(?a), p :: ?a -> Boolean) :: Optionof(?a):
  ....

check:  find_pred([0, 1, 2], fun(x): x == 0)
        ~is some(0)
check:  find_pred(["a", "b", "c"], fun(x): x == "b")
        ~is some("b")
check:  find_pred([0, 1, 2], fun(x): x == 3)
        ~is none()

// Find the index of the first element satisfying the predicate `p`, or none if not found
fun index_of_pred(l :: Listof(?a), p :: ?a -> Boolean) :: Optionof(?a):
  ....

// check:  index_of_pred([0, 1, 2], fun(x): x == 0)
//         ~is some(0)
// check:  index_of_pred([0, 1, -2], fun(x): x == -2)
//         ~is some(2)
// check:  index_of_pred(["a", "b", "c"], fun(x): x == "z")
//         ~is none()


// Applies `f` to every element of `l`
fun map(l :: Listof(?a), f :: (?a) -> ?b) :: Listof(?b):
  ....

// Applies `f` to every element of `l` paired with an accumulated value which starts at `init`.
// Returns the accumulated value
fun fold(l :: Listof(?a), init :: ?b, f:: (?a, ?b) -> ?b) :: ?b:
  ....

// Returns `#true` if `f` returns `#true` for every element of `l`, `#false` otherwise
// !! Useful for homework
fun andmap(l :: Listof(?a), f :: (?a) -> Boolean) :: Boolean:
  ....

type Treeof(?a)
| Leaf(a :: ?a)
| Node(left :: Treeof(?a), right :: Treeof(?a))

// Replace every element of `t` with the result of applying `f` to it
// !! Homework
fun tree_map(t :: Treeof(?a), f :: (?a) -> ?b) :: Treeof(?b):
  ....

// Find if the tree contains an element that satisfies `f` 
fun tree_search(t :: Treeof(?a), f :: (?a) -> Boolean) :: Boolean:
  ....

// Append the elements of `l1` and `l2`
fun append(l1 :: Listof(?a), l2 :: Listof(?a)) :: Listof(?a):
  ....

// return the altenating values of a list [1,2,3] -> [1,3] // [1,2,3,4] -> [1,3] // [1,2,3,4,5] -> [1,3,5]
fun alternates(l :: Listof(Int)) :: Listof(Int):
  ....

// check:  alternates([1, 2, 3])
//         ~is [1, 3]
// check:  alternates([1, 2, 3, 4])
//         ~is [1, 3]
// check:  alternates([1, 2, 3, 4, 5])
//         ~is [1, 3, 5]
