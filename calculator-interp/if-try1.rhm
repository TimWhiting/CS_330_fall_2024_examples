#lang shplait

type Exp
| intE(n :: Int)
| plusE(l:: Exp, r:: Exp)
| multE(l:: Exp, r:: Exp)
| ifE(conditional :: Exp, thenBranch :: Exp, elseBranch :: Exp)

fun interp(a :: Exp) :: Int:
  match a
  | intE(n): n
  | plusE(l, r): interp(l) + interp(r)
  | multE(l, r): interp(l) * interp(r)
  | ifE(conditional, then, else): 
      if interp(conditional) != 0 | interp(then) | interp(else)

fun parse(s :: Syntax) :: Exp:
  cond
  | syntax_is_integer(s):
      intE(syntax_to_integer(s))
  | ~else:
      match s
      | 'if $conditional then $then else $else':
          ifE(parse(conditional), parse(then), parse(else))
      | '$e1 + $e2':
          plusE(parse(e1), parse(e2))
      | '$e1 * $e2':
          multE(parse(e1), parse(e2))
      | '($e)': parse(e)
      | ~else: error(#'parse, "invalid input " +& s)

check: parse('if 1 then 2 else 3')
       ~is ifE(intE(1), intE(2), intE(3))

// 3
check:  interp(intE(3))
        ~is 3

// 1 + 3
check:  interp(plusE(intE(1), intE(3)))
        ~is 4

check: interp(ifE(intE(1), intE(2), intE(3)))
       ~is 2

check: interp(ifE(intE(0), intE(2), intE(3)))
       ~is 3

// 2 * 4
check:  interp(multE(intE(2), intE(4)))
        ~is 8

// 1 + 2 * 4
check:  interp(plusE(intE(1), multE(intE(2), intE(4))))
        ~is 9

check:  parse('2')
        ~is intE(2)

check:  parse('2 + 3')
        ~is plusE(intE(2), intE(3))

check:  parse('2 * 3')
        ~is multE(intE(2), intE(3))

check:  parse('(1 + 2) * 4')
        ~is multE(plusE(intE(1), intE(2)), intE(4))

check:  parse('2 2')
        ~raises "invalid input"

// 4 minutes