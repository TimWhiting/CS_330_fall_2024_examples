#lang shplait

type Exp
| intE(n :: Int)
| plusE(l:: Exp, r:: Exp)
| multE(l:: Exp, r:: Exp)
| andE(l :: Exp, r :: Exp)
| ifE(conditional :: Exp, thenBranch :: Exp, elseBranch :: Exp)
| boolE(b:: Boolean)

type Value
| intV(i:: Int)
| boolV(b:: Boolean)

fun interp(a :: Exp) :: Value:
  match a
  | intE(n): intV(n)
  | boolE(b): boolV(b)
  | plusE(l, r): intOp(l, r, fun(l_i, r_i): l_i + r_i)
  | multE(l, r): intOp(l, r, fun(l_i, r_i): l_i * r_i)
  | andE(l, r): boolOp(l, r, fun(l_i, r_i): l_i && r_i)
  | ifE(conditional, then, else):
      if boolV.b(interp(conditional)) | interp(then) | interp(else)

fun intOp(l :: Exp, r :: Exp, op :: (Int, Int) -> Int) :: Value:
  match interp(l)
  | intV(i):
      match interp(r)
      | intV(j): intV(op(i, j))
      | ~else: error(#'intOp, "invalid operand for operation " +& r)
  | ~else: error(#'intOp, "invalid operand for operation " +& l)

fun boolOp(l :: Exp, r :: Exp, op :: (Boolean, Boolean) -> Boolean) :: Value:
  match interp(l)
  | boolV(i):
      match interp(r)
      | boolV(j): boolV(op(i, j))
      | ~else: error(#'boolOp, "invalid operand for operation " +& r)
  | ~else: error(#'boolOp, "invalid operand for operation " +& l)


fun parse(s :: Syntax) :: Exp:
  cond
  | syntax_is_integer(s):
      intE(syntax_to_integer(s))
  | syntax_is_boolean(s):
      boolE(syntax_to_boolean(s))
  | ~else:
      match s
      | 'if $conditional then $then else $else':
          ifE(parse(conditional), parse(then), parse(else))
      | '$e1 && $e2':
          andE(parse(e1), parse(e2))
      | '$e1 + $e2':
          plusE(parse(e1), parse(e2))
      | '$e1 * $e2':
          multE(parse(e1), parse(e2))
      | '($e)': parse(e)
      | ~else: error(#'parse, "invalid input " +& s)

check: parse('if 1 then 2 else 3')
       ~is ifE(intE(1), intE(2), intE(3))

// 3
check:  interp(intE(3))
        ~is intV(3)

// 1 + 3
check:  interp(plusE(intE(1), intE(3)))
        ~is intV(4)

check: interp(ifE(boolE(#true), intE(2), intE(3)))
       ~is intV(2)

check: interp(ifE(boolE(#false), intE(2), intE(3)))
       ~is intV(3)

// 2 * 4
check:  interp(multE(intE(2), intE(4)))
        ~is intV(8)

// 1 + 2 * 4
check:  interp(plusE(intE(1), multE(intE(2), intE(4))))
        ~is intV(9)

check:  parse('2')
        ~is intE(2)

check:  parse('2 + 3')
        ~is plusE(intE(2), intE(3))

check:  parse('2 * 3')
        ~is multE(intE(2), intE(3))

check:  parse('(1 + 2) * 4')
        ~is multE(plusE(intE(1), intE(2)), intE(4))

check:  parse('2 2')
        ~raises "invalid input"
